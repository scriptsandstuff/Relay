var r = new relay(0.25, 0.75, 0);

var bb = [-0.15, 1.15, 1.15, -0.15];		
var brd_P = JXG.JSXGraph.initBoard('jxg-Relay', {
		boundingbox:bb, axis:false, grid:false, 
		zoom:{wheel:true, needshift:true}, 
		pan:{enabled:true, needshift:true}, 
		showNavigation:true,	showCopyright:false,
		dependentBoards:['jxg-IO-v-time']
	});
/**
 * make axes permanent
 * credit for these axes to the author of http://jsfiddle.net/migerh/DWpAw/
 */
var x0 = brd_P.create('point', [function () {
    	var coords = new JXG.Coords(JXG.COORDS_BY_SCREEN, [0, brd_P.canvasHeight - 50], brd_P);
    	return coords.usrCoords;
	}], {needsRegularUpdate: false, visible: false});
var x1 = brd_P.create('point', [function () {
	    var coords = new JXG.Coords(JXG.COORDS_BY_SCREEN, [brd_P.canvasWidth, brd_P.canvasHeight - 50], brd_P);
   	 return coords.usrCoords;
	}], {needsRegularUpdate: false, visible: false});
var oX = brd_P.create('axis', [x0, x1], {needsRegularUpdate: false, strokeColor: 'blue'});


var y0 = brd_P.create('point', [function () {
    var coords = new JXG.Coords(JXG.COORDS_BY_SCREEN, [50, brd_P.canvasHeight], brd_P);
    return coords.usrCoords;
}], {needsRegularUpdate: false, visible: false});
var y1 = brd_P.create('point', [function () {
    var coords = new JXG.Coords(JXG.COORDS_BY_SCREEN, [50, 0], brd_P);
    return coords.usrCoords;
}], {needsRegularUpdate: false, visible: false});

var oY = brd_P.create('axis', [y0, y1], {needsRegularUpdate: false, strokeColor: 'red'});

/**
 * zoom on (0, 0) to always keep diagonal 
 *  
 */
/*brd_P.on('mouseWheelListener', function(evt){
	if (!this.attr.zoom.wheel || (this.attr.zoom.needshift && !evt.shiftKey)) {
		return true;
   }
	evt = evt || window.event;
	var wd = evt.detail ? -evt.detail : evt.wheelDelta / 40,
	pos = new Coords(Const.COORDS_BY_SCREEN, this.getMousePosition(evt), this);
            
	if (wd > 0) {
   	this.zoomIn(-pos.usrCoords[1], -pos.usrCoords[1]);
	} else {
   	this.zoomOut(-pos.usrCoords[1], -pos.usrCoords[1]);
	}
	
	evt.preventDefault();
	return false;
});
*/
//brd_P.on('zoomIn', function(x, y){
brd_P.zoomIn = function(x, y){
	var bb = this.getBoundingBox(),
       zX = this.attr.zoom.factorx,
       zY = this.attr.zoom.factory,
       dX = (bb[2] - bb[0]) * (1.0 - 1.0 / zX),
       dY = (bb[1] - bb[3]) * (1.0 - 1.0 / zY),
       lr = 0.5,
       tr = 0.5;

   if (this.zoomX > this.attr.zoom.max || this.zoomY > this.attr.zoom.max) {
       return this;
   }
   //--------------------- y=x=0;
    lr = ( -bb[0]) / (bb[2] - bb[0]);
    tr = (bb[1] ) / (bb[1] - bb[3]);
/*
   if (Type.isNumber(x) && Type.isNumber(y)) {
       lr = (x - bb[0]) / (bb[2] - bb[0]);
       tr = (bb[1] - y) / (bb[1] - bb[3]);
   }
*/
   this.setBoundingBox([bb[0] + dX * lr, bb[1] - dY * tr, bb[2] - dX * (1 - lr), bb[3] + dY * (1 - tr)], false);
   this.zoomX *= zX;
   this.zoomY *= zY;
   return this.applyZoom();
}
brd_P.zoomOut= function (x, y) {
   var bb = this.getBoundingBox(),
       zX = this.attr.zoom.factorx,
       zY = this.attr.zoom.factory,
       dX = (bb[2] - bb[0]) * (1.0 - zX),
       dY = (bb[1] - bb[3]) * (1.0 - zY),
       lr = 0.5,
       tr = 0.5,
       mi = this.attr.zoom.eps || this.attr.zoom.min || 0.001;  // this.attr.zoom.eps is deprecated

   if (this.zoomX < mi || this.zoomY < mi) {
       return this;
   }
	lr = ( - bb[0]) / (bb[2] - bb[0]);
   tr = (bb[1] ) / (bb[1] - bb[3]);
       
   this.setBoundingBox([bb[0] + dX * lr, bb[1] - dY * tr, bb[2] - dX * (1 - lr), bb[3] + dY * (1 - tr)], false);
   this.zoomX /= zX;
   this.zoomY /= zY;

   return this.applyZoom();
}
/**
 * set boundingBox to always keep diagonal y=x after panning 
 *  
 */
brd_P.mouseOriginMove= function (evt) {
   var r = (this.mode === this.BOARD_MODE_MOVE_ORIGIN),
       pos;				
   if (r) {
       pos = this.getMousePosition(evt);
       this.moveOrigin(pos[0], pos[1], true);
       var bbb = this.getBoundingBox();
       this.setBoundingBox([bbb[3], bbb[1], bbb[1], bbb[3]], false);
      // if(this.)
   }
   return r;
}
/**
 * board objects
 */
var diagonal = brd_P.create('line', [[0, 0], [1, 1]], {fixed:true, highlightstrokecolor:'blue'}); 	//diagonal.setAttribute({    fixed: true	});
//remember the axis does not go thro (0, 0)
//var poly = b.create('regularpolygon', [[4/6, 1/6], [5/6, 1/6], 4]);
//var poly = b.create('regularpolygon', [[1/3, 1/3], [2/3, 1/3], 4]);
//var poly = b.create('regularpolygon', [[0.7, 0.2], [0.8, 0.2], 4]);

//var hystPoint =  brd_P.create('point',[4/6, 1/3], {face:'[]', size:10, color:'lightblue', name:'hysteron'});
var hystPoint =  brd_P.create('point',[0.75, 0.25], {face:'[]', size:10, color:'lightblue', name:'hysteron'});

//var in_in = iVal(brd_P, diagonal);
/*	
function iVal(board, diagonal){
	//board.update();
	var x = 0.0;
	var inVal = board.create('glider', [ x, x,	diagonal 	]);
 	inVal.setAttribute({fixed: false, size:6, name:''});
 	return inVal;
} 
*/

/**
 * math vars
 */
var time_current = 0.0;
var time_last_update = +new Date();//+makes it a number I think
var timer_preisach = 0.0;

var in_in = brd_P.create('glider', [ 0, 0,	diagonal]);
in_in.setAttribute({fixed: false, size:6, name:''});

in_in.on('drag', function(){
	time_since_update = +new Date() - time_last_update;
	time_last_update = +new Date();
	time_current += time_since_update/1000;
	pt2.setAttribute({size:20});	
	var out = r.update(this.X());
	in_out.setPositionDirectly(JXG.COORDS_BY_USER, [this.X(), out]);
	in_time_turtle.moveTo([time_current, this.X()]);
	//in_time.setPositionDirectly(JXG.COORDS_BY_USER, [time_current, this.X()]);
	if(time_current > 5){
		moveView(time_current);
	}
});

/*
wiper = brd_P.create(   'line',	[	//horizontal line           
		[ function(){return inVal.X();},  function(){return inVal.X();}  ],
		[ 2, function(){return inVal.X();} ]
	],
	{	// strokeColor:'#aa2233',
		straightFirst:false, 
		straightLast:false, 
		strokeWidth:1, 
		trace:false
	}
);
painter = brd_P.create(	'line', [	// vertical line 
 		[ function(){return inVal.X();}, function(){return inVal.X();} ],
		[ function(){return inVal.X();},            0        ]	
	], 
 	{	//	strokeColor:'#aa2233',
		straightFirst:false, 
		straightLast:false, 
 		strokeWidth:3, 
 		trace:false
 	}
);
*/

